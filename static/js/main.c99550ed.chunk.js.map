{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/Header.js","constants.js","containers/App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","robot","i","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","Header","nextProps","nextState","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c99550ed.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {robots.map((robot, i) => {\n        return (\n          <Card \n            key={i} \n            id={robot.id} \n            name={robot.name} \n            email={robot.email}\n            />\n        )\n      })}\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchField, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input \n        className='pa3 ba b--green bg-lightest-blue' \n        type='search' \n        placeholder='search robots' \n        onChange={searchChange}/>\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true })\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oooops. That is not good</h1>\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\n\nclass Header extends Component {\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n\n  render () {\n    return <h1 className='f1'>Robofriends</h1>\n  }\n}\n\nexport default Header;\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport Header from '../components/Header';\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\nclass App extends Component {\n\n  componentDidMount () {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n\n    return isPending ?\n      <h1>Loading</h1> : \n      (\n        <div className='tc'>\n          <Header/>\n          <SearchBox searchChange={onSearchChange}/>\n          \n          <Scroll>\n            <ErrorBoundry>\n              <CardList robots={filteredRobots}/>\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS\n} from \"./constants\";\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n      .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { \n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS\n} from \"./constants\";\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD: \n      return {...state, searchField: action.payload};\n    default: \n      return state;\n  }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch(action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return {...state, isPending: true };\n    case REQUEST_ROBOTS_SUCCESS:\n      return {...state, robots: action.payload, isPending: false };\n    case REQUEST_ROBOTS_FAILED:\n      return {...state, error: action.payload, isPending: false };\n    default: \n      return state;\n  }\n} ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>  \n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}